# Generated by Django 3.1.7 on 2025-10-20 15:16

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalsModel',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('species', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=100)),
                ('weight', models.IntegerField()),
                ('healthStatus', models.CharField(choices=[('Healthy', 'Healthy'), ('Sick', 'Sick'), ('Quarantined', 'Quarantined')], max_length=100)),
                ('enclosureId', models.CharField(max_length=100)),
                ('createAt', models.DateTimeField(auto_now_add=True)),
                ('updateAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'animals',
            },
        ),
        migrations.CreateModel(
            name='EnclosureModel',
            fields=[
                ('idEnclosure', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('nameEnclosure', models.CharField(max_length=100)),
                ('areaSize', models.CharField(max_length=100)),
                ('climate', models.CharField(choices=[('Tropical', 'Tropical'), ('Desert', 'Desert'), ('Aquatic', 'Aquatic'), ('Temperate', 'Temperate')], max_length=100)),
                ('capacity', models.IntegerField()),
            ],
            options={
                'db_table': 'enclosures',
            },
        ),
        migrations.CreateModel(
            name='FeedRecordModel',
            fields=[
                ('idFeedRecord', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('animalIdFeedRecord', models.CharField(max_length=100)),
                ('foodId', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('feedAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'feed_records',
            },
        ),
        migrations.CreateModel(
            name='FoodModel',
            fields=[
                ('idFood', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('nameFood', models.CharField(max_length=100)),
                ('typeFood', models.CharField(choices=[('Meat', 'Meat'), ('Plant', 'Plant'), ('Fish', 'Fish'), ('Insect', 'Insect')], max_length=100)),
                ('caloriesPerUnit', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300)])),
            ],
            options={
                'db_table': 'foods',
            },
        ),
        migrations.CreateModel(
            name='ManagerModel',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('userName', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('role', models.CharField(choices=[('Staff', 'Staff'), ('Manager', 'Manager')], max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('failed_attempts', models.IntegerField(default=0)),
                ('lock_until', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'managers',
                'ordering': ['userName'],
            },
        ),
    ]
